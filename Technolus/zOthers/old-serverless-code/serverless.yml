service: gestor-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-1
  
  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: gestor-db
    stripeSecretKey: ${env:STRIPE_SECRET_KEY}

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-1:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /entries
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: api/create.main
    events:
      - http:
          path: entries
          method: post
          cors: true
          authorizer: aws_iam
  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /entries/{id}
    # - method: GET request
    handler: api/get.main
    events:
      - http:
          path: entries/{id}
          method: get
          cors: true
          authorizer: aws_iam
  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /entry
    # - method: GET request
    handler: api/list.main
    events:
      - http:
          path: entries
          method: get
          cors: true
          authorizer: aws_iam
  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /entry/{id}
    # - method: PUT request
    handler: api/update.main
    events:
      - http:
          path: entry/{id}
          method: put
          cors: true
          authorizer: aws_iam
  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /entry/{id}
    # - method: DELETE request
    handler: api/delete.main
    events:
      - http:
          path: entry/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  billing:
    # Defines an HTTP API endpoint that calls the main function in billing.js
    # - path: url path is /billing
    # - method: POST request
    handler: api/billing.main
    events:
      - http:
          path: billing
          method: post
          cors: true
          authorizer: aws_iam
  httpcall:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /entry
    # - method: GET request
    #handler: api/list.main
    handler: custom/httpcall.main
    events:
      - http:
          path: entries
          method: get
          cors: true
          authorizer: aws_iam