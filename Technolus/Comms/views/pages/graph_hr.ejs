<!-- views/pages/auth.ejs -->
<!doctype html>
<html>

<head>
    <title>Graphing</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css">
    <style>
        body {
            padding-top: 70px;
            font-family: 'Roboto', sans-serif;
            background-color: #101214;
            color: #7A7C80;
        }

        .footer-note {
            padding-top: 0.9em;
            font-size: 0.9em;
            text-align: end;
        }
    </style>
    <script>

        // chart from:
        //https://canvasjs.com/javascript-charts/

        //maybe replace with a range area chart? the area would be the difference between one point and the next(top range) and the previous(bottom range)
        //https://canvasjs.com/javascript-charts/range-area-line-chart/

        // check charts from https://www.chartjs.org/ , they have better look/feel (but are they actuaslly better???)

        window.onload = function () {

            //var dps = [];
            var chart = new CanvasJS.Chart("chartContainer", {
                exportEnabled: false,
                animationEnabled: true,
                zoomEnabled: true,
                title: {
                    text: ""
                },
                toolTip: {
                    shared: true,
                    content: "{x}: {y}",//": {y}",  {
                    contentFormatter: function (e) {
                        var content = " ";
                        const lang = navigator.language || navigator.languages[0];
                        for (var i = 0; i < e.entries.length; i++) {
                            content += `${e.entries[i].dataPoint.x.toLocaleString("pt-PT").replace(/, /, '<br>')} -> <strong style="font-color:red">${parseInt(e.entries[i].dataPoint.y)} (${e.axisY.title})</strong>`;
                        }
                        return content;
                    },

                },
                axisX: {
                    gridColor: "Silver",
                    valueFormatString: "1d HH:mm",
                    gridThickness: 2,
                    interval:2, 
                },
                axisY: {
                    title: "BPM",
                    gridColor: "Silver",
                    //includeZero: true,
                    //lineColor: "#7F6084",
                    //tickColor: "#7F6084",
                    //labelFontColor: "#7F6084",
                    //titleFontColor: "#7F6084",
                    //prefix: "$",
                    //suffix: "k"
                },
                axisY2: {
                    title: "STEPS",
                    gridColor: "Silver",
                    //includeZero: true,
                    //lineColor: "#7F6084",
                    //tickColor: "#7F6084",
                    //labelFontColor: "#7F6084",
                    //titleFontColor: "#7F6084",
                    //prefix: "$",
                    //suffix: "k"
                },
                data: []
            });

            const colors = {
                0: "#4F81BC",
                1: "#e2b0af", //"#C0504E",
                2: "#9BBB58",
                3: "#23BFAA",
                4: "#8064A1",
                5: "#4AACC5",
                6: "#F79647",
                7: "#7F6084",
                8: "#77A033",
                9: "#33558B",
                10: "#E59566"
            }

            var xVal = 0;
            var yVal = 0;
            var updateInterval = 4 * 60 * 1000;
            var dataLength = 10 // 1000; // max number of dataPoints visible at any point

            var updateChart = function (count, data) {
                const params = new URLSearchParams(window.location.search);


                let n_avg = parseInt(params.get('average')) || 1;
                let rollingWindow = parseInt(params.get('window')) || 24;
                let limit = parseInt(params.get('points')) || 99999;
                if (limit > 99999) { limit = 99999 }


                fetch(`/heartrate?window=${rollingWindow}&points=${limit ? (limit + n_avg - 1) : limit}`) //
                    .then((resp) => resp.json())
                    .then(function (data) {

                        let dps = [];

                        //console.info('fetch()', data);

                        // count is number of times loop runs to generate random dataPoints.
                        for (var j = n_avg - 1; j < data.length; j++) {

                            let bpm_avg = 0;

                            for (let i = 0; i < n_avg; i++) {
                                bpm_avg += data[j - i].f; //console.log(data[i].f);
                            }

                            bpm_avg = Math.round(bpm_avg / n_avg);

                            dps.push({
                                //x:  new Date(data[j].T) ,//xVal,
                                x: new Date((new Date(data[j].T)).getTime() + (n_avg / 2) * 60 * 1000),//xVal,
                                y: bpm_avg
                            });

                            xVal++;

                        }
                        if (dps.length > limit) {//dataLength
                            dps.shift();
                        }
                        
                        
                        chart.options.data.push({
                            type: "line",//"spline",,
                            color: colors[0],
                            markerSize: 0,
                            dataPoints:  dps,
                            //showInLegend: true,
                            axisYIndex: 1,
                        });
                        chart.render();
                        document.querySelector('.canvasjs-chart-credit').style.display = 'none';
                    });

                fetch(`/steps?window=${rollingWindow}&points=${limit ? (limit + n_avg - 1) : limit}`) //
                    .then((resp) => resp.json())
                    .then(function (data) {

                        let dps = [];

                        //console.info('fetch()', data);

                        // count is number of times loop runs to generate random dataPoints.
                        for (var j = 1; j < data.length; j++) {

                            dps.push({
                                //x:  new Date(data[j].T) ,//xVal,
                                x: new Date((new Date(data[j].T)).getTime()),//xVal,
                                y: data[j-1].f,
                            });


                            dps.push({
                                //x:  new Date(data[j].T) ,//xVal,
                                x: new Date((new Date(data[j].T)).getTime()),//xVal,
                                y: data[j].f,
                            });
                            xVal++;

                        }
                        if (dps.length > limit) {//dataLength
                            dps.shift();
                            dps.shift();
                        }

                        chart.options.data.push({
                            type: "area",//"line",
                            color: colors[1],
                            markerSize: 5,
                            dataPoints:  dps,
                            //showInLegend: true,
                            axisYIndex: 0,
                            axisYType: "secondary",
                        });
                        chart.render();
                        document.querySelector('.canvasjs-chart-credit').style.display = 'none';
                        
                    });

            }

            updateChart(dataLength);
            setInterval(function () { updateChart() }, updateInterval);

        }
    </script>
</head>

<body>

    <div class="container">
        <div class="jumbotron text-center text-primary">
            <h1><span class="fa"></span> <%="Biometrics"%> <span class="fa fa-user-o"></span></h1>
            <div id="chartContainer" style="height: 370px; width:100%;"></div>
            <p class="footer-note">
                *Data delayed ~1 hour.
            </p>

        </div>
    </div>
    <script src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
</body>

</html>